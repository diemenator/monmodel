# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.link import Link  # noqa: F401,E501
from swagger_server.models.model import Model  # noqa: F401,E501
from swagger_server.models.threshold import Threshold  # noqa: F401,E501
from swagger_server import util


class Metric(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, record: str=None, links: List[Link]=None, query: str=None, display: str=None, legend: str=None, thresholds: List[Threshold]=None, grafana_properties_json: str=None, children: Model=None):  # noqa: E501
        """Metric - a model defined in Swagger

        :param name: The name of this Metric.  # noqa: E501
        :type name: str
        :param record: The record of this Metric.  # noqa: E501
        :type record: str
        :param links: The links of this Metric.  # noqa: E501
        :type links: List[Link]
        :param query: The query of this Metric.  # noqa: E501
        :type query: str
        :param display: The display of this Metric.  # noqa: E501
        :type display: str
        :param legend: The legend of this Metric.  # noqa: E501
        :type legend: str
        :param thresholds: The thresholds of this Metric.  # noqa: E501
        :type thresholds: List[Threshold]
        :param grafana_properties_json: The grafana_properties_json of this Metric.  # noqa: E501
        :type grafana_properties_json: str
        :param children: The children of this Metric.  # noqa: E501
        :type children: Model
        """
        self.swagger_types = {
            'name': str,
            'record': str,
            'links': List[Link],
            'query': str,
            'display': str,
            'legend': str,
            'thresholds': List[Threshold],
            'grafana_properties_json': str,
            'children': Model
        }

        self.attribute_map = {
            'name': 'name',
            'record': 'record',
            'links': 'links',
            'query': 'query',
            'display': 'display',
            'legend': 'legend',
            'thresholds': 'thresholds',
            'grafana_properties_json': 'grafana-properties-json',
            'children': 'children'
        }
        self._name = name
        self._record = record
        self._links = links
        self._query = query
        self._display = display
        self._legend = legend
        self._thresholds = thresholds
        self._grafana_properties_json = grafana_properties_json
        self._children = children

    @classmethod
    def from_dict(cls, dikt) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metric of this Metric.  # noqa: E501
        :rtype: Metric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Metric.


        :return: The name of this Metric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Metric.


        :param name: The name of this Metric.
        :type name: str
        """

        self._name = name

    @property
    def record(self) -> str:
        """Gets the record of this Metric.


        :return: The record of this Metric.
        :rtype: str
        """
        return self._record

    @record.setter
    def record(self, record: str):
        """Sets the record of this Metric.


        :param record: The record of this Metric.
        :type record: str
        """

        self._record = record

    @property
    def links(self) -> List[Link]:
        """Gets the links of this Metric.


        :return: The links of this Metric.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this Metric.


        :param links: The links of this Metric.
        :type links: List[Link]
        """

        self._links = links

    @property
    def query(self) -> str:
        """Gets the query of this Metric.


        :return: The query of this Metric.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this Metric.


        :param query: The query of this Metric.
        :type query: str
        """

        self._query = query

    @property
    def display(self) -> str:
        """Gets the display of this Metric.


        :return: The display of this Metric.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display: str):
        """Sets the display of this Metric.


        :param display: The display of this Metric.
        :type display: str
        """

        self._display = display

    @property
    def legend(self) -> str:
        """Gets the legend of this Metric.


        :return: The legend of this Metric.
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend: str):
        """Sets the legend of this Metric.


        :param legend: The legend of this Metric.
        :type legend: str
        """

        self._legend = legend

    @property
    def thresholds(self) -> List[Threshold]:
        """Gets the thresholds of this Metric.


        :return: The thresholds of this Metric.
        :rtype: List[Threshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds: List[Threshold]):
        """Sets the thresholds of this Metric.


        :param thresholds: The thresholds of this Metric.
        :type thresholds: List[Threshold]
        """

        self._thresholds = thresholds

    @property
    def grafana_properties_json(self) -> str:
        """Gets the grafana_properties_json of this Metric.


        :return: The grafana_properties_json of this Metric.
        :rtype: str
        """
        return self._grafana_properties_json

    @grafana_properties_json.setter
    def grafana_properties_json(self, grafana_properties_json: str):
        """Sets the grafana_properties_json of this Metric.


        :param grafana_properties_json: The grafana_properties_json of this Metric.
        :type grafana_properties_json: str
        """

        self._grafana_properties_json = grafana_properties_json

    @property
    def children(self) -> Model:
        """Gets the children of this Metric.


        :return: The children of this Metric.
        :rtype: Model
        """
        return self._children

    @children.setter
    def children(self, children: Model):
        """Sets the children of this Metric.


        :param children: The children of this Metric.
        :type children: Model
        """

        self._children = children
