# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.alert_defaults import AlertDefaults  # noqa: F401,E501
from swagger_server.models.metric import Metric  # noqa: F401,E501
from swagger_server.models.template_values import TemplateValues  # noqa: F401,E501
from swagger_server import util


class Model(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, alert_defaults: AlertDefaults=None, template_values: List[TemplateValues]=None, scrape_targets: List[str]=None, metrics: List[Metric]=None, template_metrics: List[Metric]=None):  # noqa: E501
        """Model - a model defined in Swagger

        :param id: The id of this Model.  # noqa: E501
        :type id: str
        :param name: The name of this Model.  # noqa: E501
        :type name: str
        :param alert_defaults: The alert_defaults of this Model.  # noqa: E501
        :type alert_defaults: AlertDefaults
        :param template_values: The template_values of this Model.  # noqa: E501
        :type template_values: List[TemplateValues]
        :param scrape_targets: The scrape_targets of this Model.  # noqa: E501
        :type scrape_targets: List[str]
        :param metrics: The metrics of this Model.  # noqa: E501
        :type metrics: List[Metric]
        :param template_metrics: The template_metrics of this Model.  # noqa: E501
        :type template_metrics: List[Metric]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'alert_defaults': AlertDefaults,
            'template_values': List[TemplateValues],
            'scrape_targets': List[str],
            'metrics': List[Metric],
            'template_metrics': List[Metric]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'alert_defaults': 'alert-defaults',
            'template_values': 'template-values',
            'scrape_targets': 'scrape-targets',
            'metrics': 'metrics',
            'template_metrics': 'template-metrics'
        }
        self._id = id
        self._name = name
        self._alert_defaults = alert_defaults
        self._template_values = template_values
        self._scrape_targets = scrape_targets
        self._metrics = metrics
        self._template_metrics = template_metrics

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Model.


        :return: The id of this Model.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Model.


        :param id: The id of this Model.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Model.


        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Model.


        :param name: The name of this Model.
        :type name: str
        """

        self._name = name

    @property
    def alert_defaults(self) -> AlertDefaults:
        """Gets the alert_defaults of this Model.


        :return: The alert_defaults of this Model.
        :rtype: AlertDefaults
        """
        return self._alert_defaults

    @alert_defaults.setter
    def alert_defaults(self, alert_defaults: AlertDefaults):
        """Sets the alert_defaults of this Model.


        :param alert_defaults: The alert_defaults of this Model.
        :type alert_defaults: AlertDefaults
        """

        self._alert_defaults = alert_defaults

    @property
    def template_values(self) -> List[TemplateValues]:
        """Gets the template_values of this Model.


        :return: The template_values of this Model.
        :rtype: List[TemplateValues]
        """
        return self._template_values

    @template_values.setter
    def template_values(self, template_values: List[TemplateValues]):
        """Sets the template_values of this Model.


        :param template_values: The template_values of this Model.
        :type template_values: List[TemplateValues]
        """

        self._template_values = template_values

    @property
    def scrape_targets(self) -> List[str]:
        """Gets the scrape_targets of this Model.


        :return: The scrape_targets of this Model.
        :rtype: List[str]
        """
        return self._scrape_targets

    @scrape_targets.setter
    def scrape_targets(self, scrape_targets: List[str]):
        """Sets the scrape_targets of this Model.


        :param scrape_targets: The scrape_targets of this Model.
        :type scrape_targets: List[str]
        """

        self._scrape_targets = scrape_targets

    @property
    def metrics(self) -> List[Metric]:
        """Gets the metrics of this Model.


        :return: The metrics of this Model.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: List[Metric]):
        """Sets the metrics of this Model.


        :param metrics: The metrics of this Model.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def template_metrics(self) -> List[Metric]:
        """Gets the template_metrics of this Model.


        :return: The template_metrics of this Model.
        :rtype: List[Metric]
        """
        return self._template_metrics

    @template_metrics.setter
    def template_metrics(self, template_metrics: List[Metric]):
        """Sets the template_metrics of this Model.


        :param template_metrics: The template_metrics of this Model.
        :type template_metrics: List[Metric]
        """

        self._template_metrics = template_metrics
